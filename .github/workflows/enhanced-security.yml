# Enhanced GitHub Actions workflow with comprehensive Snyk integration
# This file demonstrates advanced Snyk configuration for the practical guide
name: Enhanced CI/CD with Comprehensive Security

on:
  push:
    branches: ["master", "main"]
  pull_request:
    branches: ["master", "main"]
  schedule:
    # Run security scan every Monday at 2 AM UTC
    - cron: "0 2 * * 1"

env:
  JAVA_VERSION: "17"
  MAVEN_OPTS: "-Xmx1024m"

jobs:
  # Detect changes to optimize workflow execution
  changes:
    runs-on: ubuntu-latest
    outputs:
      code: ${{ steps.changes.outputs.code }}
      dependencies: ${{ steps.changes.outputs.dependencies }}
      docker: ${{ steps.changes.outputs.docker }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            code:
              - 'src/**'
              - '!src/test/**'
            dependencies:
              - 'pom.xml'
              - '.snyk'
            docker:
              - 'dockerfile'
              - 'dockerrun.aws.json'

  # Build and test job
  test:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.code == 'true' || needs.changes.outputs.dependencies == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"
          cache: maven

      - name: Run unit tests
        run: mvn -B test --file pom.xml

      - name: Generate test coverage report
        run: mvn jacoco:report

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./target/site/jacoco/jacoco.xml
          fail_ci_if_error: false

  # Comprehensive security scanning with matrix strategy
  security:
    runs-on: ubuntu-latest
    needs: [changes, test]
    if: always() && (needs.changes.outputs.code == 'true' || needs.changes.outputs.dependencies == 'true' || github.event_name == 'schedule')

    strategy:
      fail-fast: false
      matrix:
        scan-type: [dependencies, code]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"
          cache: maven

      - name: Build project (required for comprehensive scanning)
        run: mvn clean compile -DskipTests

      - name: Debug Snyk environment
        run: |
          echo "üîç Environment debugging for Snyk scan"
          echo "Matrix scan type: ${{ matrix.scan-type }}"
          echo "Working directory: $(pwd)"
          echo "Available files:"
          ls -la
          echo "Maven dependencies:"
          mvn dependency:tree || echo "Failed to list dependencies"

      - name: Install Snyk CLI
        run: |
          echo "üì¶ Installing Snyk CLI..."
          npm install -g snyk
          snyk --version
          snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk Dependency Scan
        if: matrix.scan-type == 'dependencies'
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          echo "üîç Running Snyk dependency scan..."
          # Try the action first
          if ! snyk test --maven --severity-threshold=medium --sarif-file-output=snyk-dependencies.sarif; then
            echo "‚ö†Ô∏è Snyk test failed or found vulnerabilities, but continuing to generate SARIF"
            # Ensure SARIF file is generated even if vulnerabilities are found
            snyk test --maven --severity-threshold=medium --sarif-file-output=snyk-dependencies.sarif || true
          fi

      - name: Run Snyk Code Security Scan (SAST)
        if: matrix.scan-type == 'code'
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          echo "üîç Running Snyk code scan..."
          # Try the code scan
          if ! snyk code test --severity-threshold=high --sarif-file-output=snyk-code.sarif; then
            echo "‚ö†Ô∏è Snyk code test failed or found vulnerabilities, but continuing to generate SARIF"
            # Ensure SARIF file is generated even if vulnerabilities are found
            snyk code test --severity-threshold=high --sarif-file-output=snyk-code.sarif || true
          fi

      - name: Check if SARIF file was generated
        id: check-sarif
        run: |
          SARIF_FILE="snyk-${{ matrix.scan-type }}.sarif"
          if [ -f "$SARIF_FILE" ]; then
            echo "sarif-exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ SARIF file found: $SARIF_FILE"
          else
            echo "sarif-exists=false" >> $GITHUB_OUTPUT
            echo "‚ùå SARIF file not found: $SARIF_FILE"
            echo "Available files:"
            ls -la *.sarif 2>/dev/null || echo "No SARIF files found"
          fi

      - name: Upload SARIF results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: steps.check-sarif.outputs.sarif-exists == 'true'
        with:
          sarif_file: snyk-${{ matrix.scan-type }}.sarif
          category: snyk-${{ matrix.scan-type }}

      - name: Archive security scan results
        uses: actions/upload-artifact@v4
        if: steps.check-sarif.outputs.sarif-exists == 'true'
        with:
          name: snyk-${{ matrix.scan-type }}-results
          path: snyk-${{ matrix.scan-type }}.sarif
          retention-days: 30

  # Container security scanning
  container-security:
    runs-on: ubuntu-latest
    needs: [changes, test]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"
          cache: maven

      - name: Build application JAR
        run: mvn clean package -DskipTests

      - name: Build Docker image
        run: |
          docker build -t cicd-demo:${{ github.sha }} .
          docker tag cicd-demo:${{ github.sha }} cicd-demo:latest

      - name: Run Snyk Container Scan
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: cicd-demo:latest
          args: >
            --severity-threshold=high
            --file=Dockerfile
            --exclude-base-image-vulns
            --sarif-file-output=snyk-container.sarif

      - name: Upload container scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk-container.sarif
          category: snyk-container

  # Monitor deployed dependencies (only on main branch)
  monitor:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"
          cache: maven

      - name: Build project (required for monitoring)
        run: mvn clean compile -DskipTests

      - name: Install Snyk CLI
        run: |
          echo "üì¶ Installing Snyk CLI for monitoring..."
          npm install -g snyk
          snyk --version
          snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Monitor project with Snyk
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          JAVA_HOME: ${{ env.JAVA_HOME }}
        run: |
          echo "üìä Monitoring project dependencies with Snyk..."
          echo "JAVA_HOME: $JAVA_HOME"
          echo "Java version: $(java -version)"

          # Monitor the project for ongoing vulnerability tracking
          snyk monitor --maven \
            --project-name="${{ github.repository }}-production" \
            --target-reference="${{ github.ref }}" \
            --remote-repo-url="${{ github.server_url }}/${{ github.repository }}.git" \
            || echo "‚ö†Ô∏è Monitoring completed with warnings (this is normal)"

  # Notification job for critical security issues
  notify:
    runs-on: ubuntu-latest
    needs: [security, container-security]
    if: failure() && github.event_name != 'pull_request'

    steps:
      - name: Send security alert
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            üö® Critical security vulnerabilities detected in ${{ github.repository }}

            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}

            Please review the security scan results and take immediate action.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create GitHub issue for security vulnerabilities
        uses: actions/github-script@v6
        with:
          script: |
            const title = `üö® Security vulnerabilities detected - ${context.sha.substring(0, 7)}`;
            const body = `
            Critical security vulnerabilities have been detected in the latest commit.

            **Details:**
            - Commit: ${context.sha}
            - Branch: ${context.ref}
            - Workflow: ${context.workflow}
            - Run: ${context.runNumber}

            **Action Required:**
            1. Review the security scan results in the Actions tab
            2. Check the Security tab for detailed vulnerability information
            3. Update affected dependencies or apply patches
            4. Re-run the security scan to verify fixes

            **Links:**
            - [Workflow Run](${context.payload.repository.html_url}/actions/runs/${context.runId})
            - [Security Tab](${context.payload.repository.html_url}/security)
            `;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'urgent']
            });
